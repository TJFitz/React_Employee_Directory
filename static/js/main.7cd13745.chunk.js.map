{"version":3,"sources":["components/Jumbotron/Jumbotron.js","components/Wrapper/Wrapper.js","components/Employee/Employee.js","components/Fullpage/Fullpage.js","utils/API.js","components/Searchbar/Searchbar.js","components/Sortbar/Sortbar.js","pages/Home.js","App.js","serviceWorker.js","index.js"],"names":["Jumbotron","props","className","children","Wrapper","Employee","src","picture","email","phone","title","name","Fullpage","axios","get","Searchbar","value","search","type","placeholder","aria-label","onChange","handleInputChange","Sortbar","onClick","handleSort","Home","state","employees","currentDisplay","currentSort","getEmployees","API","then","results","employeeArr","data","map","person","namePrefix","first","last","medium","setState","displayEmployees","filter","Object","entries","toLowerCase","includes","event","target","sortBy","sortedEmployees","sort","a","b","reverse","this","employee","key","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7cd13745.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Jumbotron(props) {\r\n  return <div className=\"jumbotron\">{props.children}</div>;\r\n}\r\n","import React from \"react\";\nimport \"./style.css\";\n\nexport default function Wrapper(props) {\n  return <div className=\"text-center wrapperWidth\">{props.children}</div>;\n}\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Employee(props) {\r\n  return (\r\n    <div className=\"row mx-auto\">\r\n      <div className=\"col-md-3\">\r\n        <img src={props.picture}></img>\r\n      </div>\r\n      <div className=\"col-md-2\">\r\n        <div>{props.email}</div>\r\n      </div>\r\n      <div className=\"col-md-3\"></div>\r\n      <div className=\"col-md-4\">\r\n        <div>{props.phone}</div>\r\n      </div>{\" \"}\r\n      <div className=\"col-md-3\">\r\n        <div>{`${props.title} ${props.name}`}</div>\r\n      </div>{\" \"}\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Fullpage(props) {\r\n  return <div className=\"fullpageWidth\">{props.children}</div>;\r\n}\r\n","import axios from \"axios\";\r\n\r\nexport default {\r\n  getEmployees: function () {\r\n    return axios.get(\"https://randomuser.me/api/?results=20\");\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Searchbar(props) {\r\n  return (\r\n    <div className=\"centerThis\">\r\n      <div className=\"mb-4 searchbar\">\r\n        <input\r\n          value={props.search}\r\n          className=\"form-control\"\r\n          type=\"text\"\r\n          placeholder=\"Search\"\r\n          aria-label=\"Search\"\r\n          onChange={props.handleInputChange}\r\n        ></input>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport \"./style.css\";\r\n\r\nexport default function Sortbar(props) {\r\n  return (\r\n    <div className=\"navsection\">\r\n      <button\r\n        onClick={() => {\r\n          props.handleSort(\"name\");\r\n        }}\r\n      >\r\n        Sort by Name\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          props.handleSort(\"email\");\r\n        }}\r\n      >\r\n        Sort by Email\r\n      </button>\r\n      <button\r\n        onClick={() => {\r\n          props.handleSort(\"phone\");\r\n        }}\r\n      >\r\n        Sort by Phone\r\n      </button>\r\n    </div>\r\n  );\r\n}\r\n","import React, { Component } from \"react\";\r\nimport \"./style.css\";\r\nimport Jumbotron from \"../components/Jumbotron/Jumbotron\";\r\nimport Wrapper from \"../components/Wrapper/Wrapper\";\r\nimport Employee from \"../components/Employee/Employee\";\r\nimport Fullpage from \"../components/Fullpage/Fullpage\";\r\nimport API from \"../utils/API\";\r\nimport Searchbar from \"../components/Searchbar/Searchbar\";\r\nimport Sortbar from \"../components/Sortbar/Sortbar\";\r\n\r\nexport default class Home extends Component {\r\n  state = {\r\n    search: \"\",\r\n    employees: [],\r\n    currentDisplay: [],\r\n    currentSort: 0,\r\n  };\r\n\r\n  getEmployees = () => {\r\n    API.getEmployees().then((results) => {\r\n      let employeeArr = results.data.results.map((person) => {\r\n        return {\r\n          namePrefix: person.name.title,\r\n          name: `${person.name.first} ${person.name.last}`,\r\n          email: person.email,\r\n          picture: person.picture.medium,\r\n          phone: person.phone,\r\n        };\r\n      });\r\n      this.setState({\r\n        employees: employeeArr,\r\n        currentDisplay: employeeArr,\r\n      });\r\n    });\r\n  };\r\n\r\n  displayEmployees = () => {\r\n    let displayedEmployees = this.state.employees.filter((person) => {\r\n      for (const [key, value] of Object.entries(person)) {\r\n        if (value.toLowerCase().includes(this.state.search.toLowerCase())) {\r\n          return person;\r\n        }\r\n      }\r\n    });\r\n    return displayedEmployees;\r\n  };\r\n\r\n  handleInputChange = (event) => {\r\n    this.setState({\r\n      search: event.target.value,\r\n      currentDisplay: this.displayEmployees(),\r\n    });\r\n  };\r\n\r\n  handleSort = (sortBy) => {\r\n    let sortedEmployees = this.state.employees.sort((a, b) => {\r\n      if (a[sortBy] < b[sortBy]) {\r\n        return -1;\r\n      }\r\n      if (a[sortBy] > b[sortBy]) {\r\n        return 1;\r\n      }\r\n      return 0;\r\n    });\r\n    if (this.state.currentSort === 1) {\r\n      this.setState({\r\n        employees: sortedEmployees,\r\n        currentDisplay: this.displayEmployees(),\r\n        currentSort: 0,\r\n      });\r\n    } else {\r\n      this.setState({\r\n        employees: sortedEmployees.reverse(),\r\n        currentDisplay: this.displayEmployees(),\r\n        currentSort: 1,\r\n      });\r\n    }\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.getEmployees();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <Fullpage>\r\n        <Wrapper>\r\n          <Jumbotron>\r\n            <h1>Employee Directory</h1>\r\n          </Jumbotron>\r\n          <Searchbar handleInputChange={this.handleInputChange}></Searchbar>\r\n          <Sortbar handleSort={this.handleSort}></Sortbar>\r\n          {this.state.currentDisplay.map((employee) => {\r\n            return (\r\n              <Employee\r\n                title={employee.namePrefix}\r\n                name={employee.name}\r\n                email={employee.email}\r\n                phone={employee.phone}\r\n                picture={employee.picture}\r\n                key={employee.email}\r\n              ></Employee>\r\n            );\r\n          })}\r\n        </Wrapper>\r\n      </Fullpage>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Home from \"./pages/Home\";\n\nfunction App() {\n  return <Home></Home>;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import \"bootstrap/dist/css/bootstrap.min.css\";\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}